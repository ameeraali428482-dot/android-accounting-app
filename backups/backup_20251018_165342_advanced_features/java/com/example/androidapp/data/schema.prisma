generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  email               String             @unique
  password            String
  name                String
  phone               String?            @unique
  phoneHash           String?            @unique
  points              Int                @default(0)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  memberships         Membership[]
  sentConnections     Connection[]       @relation("SentConnections")
  receivedConnections Connection[]       @relation("ReceivedConnections")
  notifications       Notification[]
  auditLogs           AuditLog[]
  pointTransactions   PointTransaction[]
  userRewards         UserReward[]
  personalCompanyId   String?
  joinRequests        JoinRequest[]
}

model Company {
  id                              String              @id @default(cuid())
  name                            String
  address                         String?
  phone                           String?
  createdAt                       DateTime            @default(now())
  updatedAt                       DateTime            @updatedAt
  memberships                     Membership[]
  roles                           Role[]
  accounts                        Account[]
  items                           Item[]
  customers                       Customer[]
  suppliers                       Supplier[]
  invoices                        Invoice[]
  journalEntries                  JournalEntry[]
  reminders                       Reminder[]
  campaigns                       Campaign[]
  deliveryReceipts                DeliveryReceipt[]
  sharedLinks                     SharedLink[]
  settings                        CompanySettings?
  employees                       Employee[]
  payrolls                        Payroll[]
  services                        Service[]
  doctors                         Doctor[]
  vouchers                        Voucher[]
  transfers                       FinancialTransfer[]
  exchanges                       CurrencyExchange[]
  joinRequests                    JoinRequest[]
  defaultCashAccountId            String?
  defaultExchangeDiffAccountId    String?
  defaultPayrollExpenseAccountId  String?
  defaultSalariesPayableAccountId String?
}

model Membership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  @@unique([userId, companyId])
}

model Role {
  id          String       @id @default(cuid())
  name        String
  description String?
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  isDefault   Boolean      @default(false)
  memberships Membership[]
  permissions Permission[]
  @@unique([companyId, name])
}

model Permission {
  id          String  @id @default(cuid())
  action      String  @unique
  description String
  group       String
  roles       Role[]
}

model Account {
  id                String             @id @default(cuid())
  name              String
  code              String
  type              String
  isDebit           Boolean
  parentCode        String?
  description       String?
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  journalEntryItems JournalEntryItem[]
  @@unique([companyId, code])
}

model Item {
  id             String      @id @default(cuid())
  name           String
  scientificName String?
  description    String?
  brand          String?
  agent          String?
  barcode        String?     @unique
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  units          ItemUnit[]
  invoiceItems   InvoiceItem[]
  reorderLevel   Int?
}

model ItemUnit {
  id               String  @id @default(cuid())
  item             Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId           String
  name             String
  conversionFactor Float
  price            Float
  cost             Float
  isBaseUnit       Boolean @default(false)
  @@unique([itemId, name])
}

model Customer {
  id               String            @id @default(cuid())
  name             String
  email            String?
  phone            String?
  address          String?
  region           String?
  category         String?
  creditLimit      Float?
  openingBalance   Float?            @default(0)
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  invoices         Invoice[]
  deliveryReceipts DeliveryReceipt[]
}

model Supplier {
  id             String    @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String?
  openingBalance Float?    @default(0)
  company        Company   @relation(fields: [companyId], references: [id])
  companyId      String
  invoices       Invoice[]
}

model Invoice {
  id              String        @id @default(cuid())
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String
  invoiceType     String
  paymentType     String
  date            DateTime
  dueDate         DateTime?
  customer        Customer?     @relation(fields: [customerId], references: [id])
  customerId      String?
  supplier        Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId      String?
  subTotal        Float
  grandTotal      Float
  paidAmount      Float
  remainingAmount Float
  status          String        @default("UNPAID")
  items           InvoiceItem[]
  journalEntry    JournalEntry?
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  item      Item    @relation(fields: [itemId], references: [id])
  itemId    String
  quantity  Float
  unit      String
  price     Float
  cost      Float
  discount  Float   @default(0)
  tax       Float   @default(0)
}

model JournalEntry {
  id                String             @id @default(cuid())
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         String
  date              DateTime
  description       String
  invoice           Invoice?           @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  invoiceId         String?            @unique
  voucher           Voucher?
  transfer          FinancialTransfer?
  exchange          CurrencyExchange?
  payroll           Payroll?
  journalEntryItems JournalEntryItem[]
  amount            Decimal?
}

model JournalEntryItem {
  id             String       @id @default(cuid())
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  journalEntryId String
  account        Account      @relation(fields: [accountId], references: [id])
  accountId      String
  type           String
  amount         Float
}

model Reminder {
  id            String   @id @default(cuid())
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String
  title         String
  description   String?
  dueDate       DateTime
  priority      String   @default("MEDIUM")
  isCompleted   Boolean  @default(false)
  isExecuted    Boolean  @default(false)
  actionType    String   @default("NOTIFICATION")
  actionPayload Json?
  assignedToId  String
  createdAt     DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  entityId  String?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  companyId String
  action    String
  entity    String
  entityId  String
  details   Json
}

model Campaign {
  id             String            @id @default(cuid())
  company        Company           @relation(fields: [companyId], references: [id])
  companyId      String
  title          String
  content        String
  type           String
  status         String
  targetAudience String
  sentAt         DateTime?
  createdAt      DateTime          @default(now())
  receipts       DeliveryReceipt[]
}

model DeliveryReceipt {
  id         String   @id @default(cuid())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  status     String
  sentAt     DateTime @default(now())
}

model Connection {
  id        String   @id @default(cuid())
  from      User     @relation("SentConnections", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedConnections", fields: [toId], references: [id])
  toId      String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  @@unique([fromId, toId])
}

model SharedLink {
  id        String    @id @default(cuid())
  company   Company   @relation(fields: [companyId], references: [id])
  companyId String
  token     String    @unique
  type      String
  filters   Json
  password  String?
  createdAt DateTime  @default(now())
  expiresAt DateTime?
}

model CompanySettings {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @unique
}

model PointTransaction {
  id        String      @id @default(cuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  action    PointAction
  points    Int
  details   Json?
  createdAt DateTime    @default(now())
}

model Reward {
  id          String       @id @default(cuid())
  name        String
  description String
  pointsCost  Int
  isActive    Boolean      @default(true)
  userRewards UserReward[]
}

model UserReward {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  reward     Reward   @relation(fields: [rewardId], references: [id])
  rewardId   String
  redeemedAt DateTime @default(now())
}

model Employee {
  id           String        @id @default(cuid())
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  name         String
  position     String
  hireDate     DateTime
  salary       Float
  contractType String
  payrollItems PayrollItem[]
}

model Payroll {
  id              String        @id @default(cuid())
  company         Company       @relation(fields: [companyId], references: [id])
  companyId       String
  year            Int
  month           Int
  status          String
  totalSalary     Float
  totalDeductions Float
  totalBonuses    Float
  netPayable      Float
  journalEntry    JournalEntry? @relation(fields: [journalEntryId], references: [id])
  journalEntryId  String?       @unique
  items           PayrollItem[]
}

model PayrollItem {
  id         String   @id @default(cuid())
  payroll    Payroll  @relation(fields: [payrollId], references: [id])
  payrollId  String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  baseSalary Float
  netSalary  Float
}

model Service {
  id          String  @id @default(cuid())
  company     Company @relation(fields: [companyId], references: [id])
  companyId   String
  name        String
  category    String
  price       Float
  description String?
}

model Doctor {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  name      String
  specialty String
}

model Voucher {
  id             String      @id @default(cuid())
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  type           VoucherType
  date           DateTime
  amount         Float
  description    String
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  journalEntryId String?     @unique
}

model FinancialTransfer {
  id             String        @id @default(cuid())
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  fromCashBoxId  String
  toCashBoxId    String
  amount         Float
  commission     Float?
  date           DateTime
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  journalEntryId String?       @unique
}

model CurrencyExchange {
  id             String        @id @default(cuid())
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  fromCurrencyId String
  fromAmount     Float
  toCurrencyId   String
  toAmount       Float
  rate           Float
  date           DateTime
  journalEntry   JournalEntry? @relation(fields: [journalEntryId], references: [id])
  journalEntryId String?       @unique
}

model JoinRequest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

enum PointAction {
  USER_REGISTRATION
  REFERRAL_SUCCESS
  FIRST_INVOICE
  DAILY_LOGIN
  REDEEM_REWARD
}

enum VoucherType {
  RECEIPT
  PAYMENT
}

