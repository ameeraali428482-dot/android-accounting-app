name: Build and Notify

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
        
    - name: Build APK and capture logs
      id: build_step
      run: ./gradlew clean assembleDebug --stacktrace > build_log.txt 2>&1 || true
      
    - name: Check Build Status
      id: check_status
      run: |
        if grep -q "BUILD FAILED" build_log.txt; then
          echo "Build failed"
          echo "build_status=failure" >> $GITHUB_OUTPUT
        else
          echo "Build successful"
          echo "build_status=success" >> $GITHUB_OUTPUT
        fi

    - name: Upload Successful Build to Telegram
      if: steps.check_status.outputs.build_status == 'success'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ✅ *Build Successful!*
          *Repository:* `${{ github.repository }}`
          *Version:* `1.0.${{ github.run_number }}`
          *Commit:* `${{ github.sha }}`
          *Branch:* `${{ github.ref_name }}`
          
          New APK is ready for download.
        document: app/build/outputs/apk/debug/app-debug.apk
        format: markdown

    - name: Prepare Failure Message
      if: steps.check_status.outputs.build_status == 'failure'
      id: prep_message
      run: |
        # Extract all lines from the first Java compilation error until the end, then trim to a safe size
        ERROR_SNIPPET=$(awk '/error: /,0' build_log.txt | head -c 3500 | sed 's/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g')
        if [ -z "$ERROR_SNIPPET" ]; then
          ERROR_SNIPPET=$(tail -n 50 build_log.txt | sed 's/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g') # Fallback to last 50 lines
        fi
        # Use a delimiter for multiline strings in environment files
        EOF_MARKER=$(head /dev/urandom | tr -dc A-Z0-9 | head -c 10)
        echo "error_message<<$EOF_MARKER" >> $GITHUB_ENV
        echo "$ERROR_SNIPPET" >> $GITHUB_ENV
        echo "$EOF_MARKER" >> $GITHUB_ENV

    - name: Notify Build Failure on Telegram
      if: steps.check_status.outputs.build_status == 'failure'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ❌ *Build Failed!*
          *Repository:* `${{ github.repository }}`
          *Commit:* `${{ github.sha }}`
          
          *Error Log:*
          ```
          ${{ env.error_message }}
          ```
          
          Full logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: markdown
