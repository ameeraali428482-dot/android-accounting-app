name: Safe Android Build & AI AutoFix

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - 'ai_patch.diff'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.actor != 'github-actions[bot]' # ✅ يمنع التكرار والـ loop

    steps:
      - uses: actions/checkout@v4

      - name: Notify Telegram (Start)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d parse_mode="Markdown" \
          --data-urlencode "text=🚀 بدأ البناء الذكي لمشروع الأندرويد."

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 11

      - name: Build project safely
        run: |
          mkdir -p build_logs
          ./gradlew assembleDebug --no-parallel --build-cache --daemon --max-workers=2 --stacktrace 2>&1 | tee build_logs/build.log || true
          tail -n 500 build_logs/build.log > build_logs/error_summary.txt

      - name: Notify Telegram (Errors)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          SUMMARY=$(cat build_logs/error_summary.txt)
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d parse_mode="Markdown" \
            --data-urlencode "text=⚠️ سجل الأخطاء:\n\`\`\`\n$SUMMARY\n\`\`\`"

      - name: Gemini AI Fix (Manual)
        if: success() || failure()
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          CONTEXT=$(cat build_logs/error_summary.txt)
          echo "🤖 إرسال الأخطاء إلى Gemini..."
          JSON=$(jq -n --arg text "$CONTEXT" '{
            "contents": [{
              "parts": [{"text": "أنت خبير Android. أصلح الخطأ التالي وأرسل patch بصيغة unified diff:\n\n" + $text}]
            }]
          }')
          RESPONSE=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" -d "$JSON")
          PATCH=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text' | sed 's/```diff//g' | sed 's/```//g')
          echo "$PATCH" > ai_patch.diff
          echo "تم حفظ التصحيح من Gemini."

      - name: Apply AI patch (if exists)
        run: |
          if [ -s ai_patch.diff ]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git apply --index ai_patch.diff || echo "⚠️ لم يمكن تطبيق التصحيح"
            git commit -am "AI: Gemini fix suggestion" || echo "⚠️ لا تغييرات"
            echo "✅ تم تطبيق تصحيح Gemini."
          else
            echo "⚠️ لا يوجد تصحيح من Gemini."
          fi
